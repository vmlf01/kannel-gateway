/*
 * wsp-push-client-state.h: Macros defining wsp push client state table rows.
 * See documentation for guidance how to use and update these.
 * 1 means an unconditional action, {} an ignored event.
 *
 * By Aarno Syvänen for Wapit Ltd.
 */

PUSH_CLIENT_STATE_NAME(PUSH_CLIENT_NULL_STATE)
PUSH_CLIENT_STATE_NAME(PUSH_CLIENT_RECEIVING)

ROW(PUSH_CLIENT_NULL_STATE,
    TR_Invoke_Ind,
    e->u.TR_Invoke_Ind.tcl == 1 && pdu->type == ConfirmedPush,
    {
     WAPEvent *pot_event;
     WAPEvent *res_event;
     Octstr *push_body;
     List *push_headers;

     if (pdu->u.ConfirmedPush.headers_len > 0) 
	 push_headers = wsp_headers_unpack(pdu->u.ConfirmedPush.headers, 0);
     else  
	 push_headers = NULL;    

     http_remove_hop_headers(push_headers);
     http_header_pack(push_headers);
     gw_assert(push_headers);
     cpm->push_headers = http_header_duplicate(push_headers);
     push_body = octstr_duplicate(pdu->u.ConfirmedPush.data);

     http_destroy_headers(push_headers);
/*
 * For debugging: just tell about the push OTA event, and destroy it here - 
 * handle_event does not do it.
 */
     pot_event = create_s_confirmedpush_ind(cpm, push_body);
     debug("wap.wsp", 0, "creating confirmed push indication for pot");
    
     wap_event_destroy(pot_event);
     octstr_destroy(push_body);
/*
 * For debugging: create S_ConfirmedPush_Res by ourselves and send it to 
 * ourselves.
 */
     res_event = create_s_confirmedpush_res(cpm);
     dispatch_to_self(res_event);
    },
    PUSH_CLIENT_RECEIVING)

ROW(PUSH_CLIENT_RECEIVING,
    S_ConfirmedPush_Res,
    1,
    {
     WAPEvent *wtp_event;

     wtp_event = create_tr_invoke_res(cpm);
     dispatch_to_wtp_resp(wtp_event);
    },
    PUSH_CLIENT_NULL_STATE)

ROW(PUSH_CLIENT_RECEIVING,
    S_PushAbort_Req,
    1,
    {
     WAPEvent *wtp_event;
     WAPEvent *pot_event;

     wtp_event = create_tr_abort_req(cpm, e->u.S_PushAbort_Req.reason);
     dispatch_to_wtp_resp(wtp_event);
     pot_event = create_s_pushabort_ind(cpm, e->u.S_PushAbort_Req.reason);
     debug("wap.wsp", 0, "creating push abort indication for pot");
     wap_event_dump(pot_event);
    },
    PUSH_CLIENT_NULL_STATE)

ROW(PUSH_CLIENT_RECEIVING,
    Abort_Event,
    1,
    {
     WAPEvent *wtp_event;
     WAPEvent *pot_event;

     wtp_event = create_tr_abort_req(cpm, e->u.S_PushAbort_Req.reason);
     dispatch_to_wtp_resp(wtp_event);
     pot_event = create_s_pushabort_ind(cpm, WSP_ABORT_USERREQ);
     debug("wap.wsp", 0, "creating push abort indication for pot");
     wap_event_dump(pot_event);
    },
    PUSH_CLIENT_NULL_STATE)

ROW(PUSH_CLIENT_RECEIVING,
    TR_Abort_Ind,
    e->u.TR_Abort_Ind.abort_code == WSP_ABORT_DISCONNECT,
    {
     debug("wap.wsp", 0, "Sorry, session level push handling not yet"
           " implemented");
    },
    PUSH_CLIENT_NULL_STATE)

ROW(PUSH_CLIENT_RECEIVING,
    TR_Abort_Ind,
    e->u.TR_Abort_Ind.abort_code == WSP_ABORT_SUSPEND,
    {
      debug("wap.wsp", 0, "Sorry, resume facility not yet implemented");
    },
    PUSH_CLIENT_NULL_STATE)

ROW(PUSH_CLIENT_RECEIVING,
    TR_Abort_Ind,
    e->u.TR_Abort_Ind.abort_code != WSP_ABORT_DISCONNECT ||
    e->u.TR_Abort_Ind.abort_code != WSP_ABORT_SUSPEND,
    {
     WAPEvent *pot_event;

     pot_event = create_s_pushabort_ind(cpm, e->u.S_PushAbort_Req.reason);
     debug("wap.wsp", 0, "creating push abort indication for pot");
     wap_event_dump(pot_event);
    },
    PUSH_CLIENT_NULL_STATE)

#undef PUSH_CLIENT_STATE_NAME
#undef ROW
