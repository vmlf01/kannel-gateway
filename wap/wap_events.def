/*
 * wap_events.def - definitions for wapbox events
 *
 * This file uses a pre-processor trick to define the structure of
 * structures. See the documentation.
 *
 * Fields of type HTTPHEADER, CAPABILITIES, and OPTIONAL_OCTSTR may
 * be NULL.  All other fields must be filled in, unless they are
 * otherwise marked.
 *
 * Fields described in the appropriate spec are listed first.  Fields
 * specific to Kannel are introduced with an empty line.  In some events,
 * we have combined fields to form an "address tuple" (see wap_addr.h).
 *
 * Aarno Syvänen
 * Lars Wirzenius
 */


/*
 * Transport layer (WDP)
 */

WAPEVENT(T_DUnitdata_Req,
	ADDRTUPLE(addr_tuple)
	OCTSTR(user_data)
	)

WAPEVENT(T_DUnitdata_Ind,
	ADDRTUPLE(addr_tuple)
	OCTSTR(user_data)
	)

/* 
 * Transaction layer (WTP)
 */

WAPEVENT(TR_Invoke_Req,
	ADDRTUPLE(addr_tuple)
	INTEGER(up_flag)
	OCTSTR(user_data)
	INTEGER(tcl)
	INTEGER(handle)
	)

WAPEVENT(TR_Invoke_Ind,
        INTEGER(ack_type)
        OCTSTR(user_data)
        INTEGER(tcl)
	ADDRTUPLE(addr_tuple)
	INTEGER(handle)
	)

WAPEVENT(TR_Invoke_Res,
	INTEGER(handle)
	)

WAPEVENT(TR_Invoke_Cnf,
	INTEGER(handle)
	)

WAPEVENT(TR_Result_Req,
	OCTSTR(user_data)
	INTEGER(handle)
	)

WAPEVENT(TR_Result_Cnf,
	INTEGER(handle)

	ADDRTUPLE(addr_tuple)
        )

WAPEVENT(TR_Abort_Req,
	INTEGER(abort_type)
	INTEGER(abort_reason)
	INTEGER(handle)
	) 

WAPEVENT(TR_Abort_Ind,
        INTEGER(abort_code)
	INTEGER(handle)

	ADDRTUPLE(addr_tuple)
        )

/*
 * Session layer (WSP), server side
 * These events use the session id as a handle.
 */

WAPEVENT(S_Connect_Ind,
	ADDRTUPLE(addr_tuple)
	HTTPHEADER(client_headers)
	CAPABILITIES(requested_capabilities)

	INTEGER(session_id)
	)

WAPEVENT(S_Connect_Res,
	HTTPHEADER(server_headers)
	CAPABILITIES(negotiated_capabilities)

	INTEGER(session_id)
	)

WAPEVENT(S_Suspend_Ind,
	INTEGER(reason)

	INTEGER(session_id)
	)

WAPEVENT(S_Resume_Ind,
	ADDRTUPLE(addr_tuple)
	HTTPHEADER(client_headers)

	INTEGER(session_id)
	)

WAPEVENT(S_Resume_Res,
	HTTPHEADER(server_headers)

	INTEGER(session_id)
	)

/*
 * Session layer (WSP), client side
 */

WAPEVENT(S_Connect_Req,
	ADDRTUPLE(addr_tuple)
	HTTPHEADER(client_headers)
	CAPABILITIES(requested_capabilities)

	INTEGER(session_handle)
	)

WAPEVENT(S_Suspend_Req,

	INTEGER(session_handle)
	)

WAPEVENT(S_Resume_Req,
	ADDRTUPLE(addr_tuple)
	HTTPHEADER(client_headers)

	INTEGER(session_handle)
	)

WAPEVENT(S_Resume_Cnf,
	HTTPHEADER(server_headers)

	INTEGER(session_handle)
	)

/*
 * Session layer (WSP), events shared between server and client side
 * On the server side, the "handle" field is always the session id.
 */

WAPEVENT(S_Disconnect_Req,
	INTEGER(reason_code)
	INTEGER(redirect_security)	/* Only meaningful if redirecting */
	INTEGER(redirect_addresses)	/* FIXME: Wrong type, not used */
	OPTIONAL_OCTSTR(error_headers)
	OPTIONAL_OCTSTR(error_body)

	INTEGER(session_handle)
	)

WAPEVENT(S_Disconnect_Ind,
	INTEGER(reason_code)
	INTEGER(redirect_security)	/* Only meaningful if redirecting */
	INTEGER(redirect_addresses)	/* FIXME: Wrong type, not used */
	OPTIONAL_OCTSTR(error_headers)
	OPTIONAL_OCTSTR(error_body)

	INTEGER(session_handle)
	)

/*
 * Pseudo-events used by session layer
 */

WAPEVENT(Disconnect_Event,

	INTEGER(session_handle)
	)

WAPEVENT(Suspend_Event,

	INTEGER(session_handle)
	)

WAPEVENT(Release_Event,

	INTEGER(dummy)
	)

WAPEVENT(Abort_Event,
	INTEGER(reason)
	)

/*
 * Per-method events for session layer, server side
 */

WAPEVENT(S_MethodInvoke_Ind,
	INTEGER(server_transaction_id)
	OCTSTR(method)				/* All caps */
	OCTSTR(request_uri)
	HTTPHEADER(request_headers)
	OPTIONAL_OCTSTR(request_body)

	HTTPHEADER(session_headers)
	ADDRTUPLE(addr_tuple)
	INTEGER(client_SDU_size)
	INTEGER(session_id)
	)

WAPEVENT(S_MethodInvoke_Res,
	INTEGER(server_transaction_id)

	INTEGER(session_id)
	)

WAPEVENT(S_MethodResult_Req,
	INTEGER(server_transaction_id)
	INTEGER(status)
	HTTPHEADER(response_headers)
	OPTIONAL_OCTSTR(response_body)

	INTEGER(session_id)
	)

WAPEVENT(S_MethodResult_Cnf,
	INTEGER(server_transaction_id)

	INTEGER(session_id)
	)

/*
 * Per-method events for session layer, client side
 */

WAPEVENT(S_MethodInvoke_Req,
	INTEGER(client_transaction_id)
	OCTSTR(method)
	OCTSTR(request_uri)
	HTTPHEADER(request_headers)
	OPTIONAL_OCTSTR(request_body)

	INTEGER(session_handle)
	)

WAPEVENT(S_MethodInvoke_Cnf,
	INTEGER(client_transaction_id)

	INTEGER(session_handle)
	)

WAPEVENT(S_MethodResult_Ind,
	INTEGER(client_transaction_id)
	INTEGER(status)
	HTTPHEADER(response_headers)
	OPTIONAL_OCTSTR(response_body)

	INTEGER(session_handle)
	)

WAPEVENT(S_MethodResult_Res,
	INTEGER(client_transaction_id)

	INTEGER(session_handle)
	)

/*
 * Per-method events used by the session layer
 * These events are used by both client and server side.
 */

WAPEVENT(S_MethodAbort_Req,
	INTEGER(transaction_id)

	INTEGER(session_hande)
	)

WAPEVENT(S_MethodAbort_Ind,
	INTEGER(transaction_id)
	INTEGER(reason)

	INTEGER(session_handle)
	)

/*
 * Per-push events used by the session layer
 */

WAPEVENT(S_ConfirmedPush_Req,
        INTEGER(server_push_id)
        HTTPHEADER(push_headers)
        OCTSTR(push_body)
        )

WAPEVENT(S_ConfirmedPush_Res,
	INTEGER(client_push_id)
	)

WAPEVENT(S_ConfirmedPush_Ind,
	INTEGER(client_push_id)
	HTTPHEADER(push_headers)
        OCTSTR(push_body)
	)

WAPEVENT(S_ConfirmedPush_Cnf,
        INTEGER(server_push_id)
        )

WAPEVENT(S_PushAbort_Req,
	INTEGER(client_push_id)
	INTEGER(abort_reason)
	)



WAPEVENT(S_PushAbort_Ind,
	INTEGER(client_push_id)
        INTEGER(abort_reason)
	)

WAPEVENT(Push_Abort,
	INTEGER(reason)
	)

/*
 * Events created by unpacking T-DUnitdata.ind events.
 * Used by WTP layer.
 */

WAPEVENT(RcvInvoke,
	OCTSTR(user_data)
	INTEGER(tcl)
	INTEGER(tid)
	INTEGER(tid_new)
	INTEGER(rid)
	INTEGER(up_flag)
	INTEGER(no_cache_supported)
	INTEGER(version)
	INTEGER(gtr)
	INTEGER(ttr)
	ADDRTUPLE(addr_tuple)
	)

WAPEVENT(RcvAbort,
	INTEGER(tid)
	INTEGER(abort_type)
	INTEGER(abort_reason)
	ADDRTUPLE(addr_tuple)
	)

WAPEVENT(RcvAck,
	INTEGER(tid)
	INTEGER(tid_ok)
	INTEGER(rid)
	ADDRTUPLE(addr_tuple)
	)

/*
 * Other events used by WTP layer.
 */

WAPEVENT(TimerTO_A,
	INTEGER(handle)
	)

WAPEVENT(TimerTO_R,
	INTEGER(handle)
	)

WAPEVENT(TimerTO_W,
	INTEGER(handle)
	)

WAPEVENT(RcvErrorPDU,
	INTEGER(tid)
	ADDRTUPLE(addr_tuple)
	)

/*
 * Events used by connectionless session protocol (WSP)
 */

WAPEVENT(S_Unit_MethodInvoke_Req,
	ADDRTUPLE(addr_tuple)
	INTEGER(transaction_id)
	OCTSTR(method)
	OCTSTR(request_uri)
	HTTPHEADER(request_headers)
	OPTIONAL_OCTSTR(request_body)
	)

WAPEVENT(S_Unit_MethodInvoke_Ind,
	ADDRTUPLE(addr_tuple)
	INTEGER(transaction_id)
	OCTSTR(method)				/* All caps */
	OCTSTR(request_uri)
	HTTPHEADER(request_headers)
	OPTIONAL_OCTSTR(request_body)
	)

WAPEVENT(S_Unit_MethodResult_Req,
	ADDRTUPLE(addr_tuple)
	INTEGER(transaction_id)
	INTEGER(status)
	HTTPHEADER(response_headers)
	OPTIONAL_OCTSTR(response_body)
	)

WAPEVENT(S_Unit_MethodResult_Ind,
	ADDRTUPLE(addr_tuple)
	INTEGER(transaction_id)
	INTEGER(status)
	HTTPHEADER(response_headers)
	OPTIONAL_OCTSTR(response_body)
	)

#undef WAPEVENT
#undef OCTSTR
#undef OPTIONAL_OCTSTR
#undef INTEGER
#undef HTTPHEADER
#undef ADDRTUPLE
#undef CAPABILITIES
