#
# Makefile.in for WapIT WAP and SMS Gateway.
#
# Lars Wirzenius <liw@wapit.com>
#


SHELL = @SHELL@

srcdir = @srcdir@
top_srcdir = @top_srcdir@
VPATH = @srcdir@
prefix = @prefix@
exec_prefix = @exec_prefix@

bindir = @bindir@
sbindir = @sbindir@
libexecdir = @libexecdir@
datadir = @datadir@
sysconfdir = @sysconfdir@
sharedstatedir = @sharedstatedir@
localstatedir = @localstatedir@
libdir = @libdir@
infodir = @infodir@
mandir = @mandir@
includedir = @includedir@
oldincludedir = /usr/include

DESTDIR =

pkgdatadir = $(datadir)/@PACKAGE@
pkglibdir = $(libdir)/@PACKAGE@
pkgincludedir = $(includedir)/@PACKAGE@

top_builddir = .

ACLOCAL = @ACLOCAL@
AUTOCONF = @AUTOCONF@
AUTOHEADER = @AUTOHEADER@

INSTALL = @INSTALL@
INSTALL_PROGRAM = @INSTALL_PROGRAM@ $(AM_INSTALL_PROGRAM_FLAGS)
INSTALL_DATA = @INSTALL_DATA@
INSTALL_SCRIPT = @INSTALL_SCRIPT@
transform = @program_transform_name@

NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
CC = @CC@
MAKEINFO = @MAKEINFO@
PACKAGE = @PACKAGE@
RANLIB = @RANLIB@
SHELL = @SHELL@
VERSION = @VERSION@

mkinstalldirs = $(SHELL) $(top_srcdir)/mkinstalldirs
CONFIG_HEADER = config.h
CONFIG_CLEAN_FILES = 

VERSION=$(shell head -1 VERSION)

LIBS=@LIBS@
CFLAGS=@CFLAGS@ -I. -Igw -Igwlib
LDFLAGS=@LDFLAGS@

MKDEPEND=$(CC) $(CFLAGS) -MM

#
# You probably don't need to touch anything below this, if you're just
# compiling and installing the software.
#

progsrcs = \
	gw/bearerbox.c \
	gw/smsbox.c \
	gw/wapbox.c

progobjs = $(progsrcs:.c=.o)
progs = $(progsrcs:.c=)

gwsrcs = $(shell echo gw/*.c)
gwobjs = $(gwsrcs:.c=.o)

libsrcs = $(shell echo gwlib/*.c)
libobjs = $(libsrcs:.c=.o)

testsrcs = $(shell echo test/*.c)
testobjs = $(testsrcs:.c=.o)
testprogs = $(testsrcs:.c=)

srcs = $(shell echo */*.c)
objs = $(srcs:.c=.o)

srcdirs = gw gwlib test utils
docdirs = $(shell echo doc/[a-z]*/.)


all: progs tests docs
progs: $(progs)
tests: $(testprogs)
docs: $(docs)

install: all
	$(INSTALL) $(progs) $(bindir)
# The following is a temporary kludge until we get a new WML compiler.
	$(INSTALL) test/test_wml $(bindir)

clean:
	rm -f core $(progs) $(testprogs) $(objs) $(docs) *.a

depend .depend:
	for dir in $(srcdirs); do \
		$(MKDEPEND) $$dir/*.c | sed "s:^[^ ]:$$dir/&:"; done > .depend
include .depend

libgw.a: $(gwobjs)
	ar rc libgw.a $(gwobjs)
	$(RANLIB) libgw.a

libgwlib.a: $(libobjs)
	ar rc libgwlib.a $(libobjs)
	$(RANLIB) libgwlib.a

libtest.a: $(testobjs)
	ar rc libtest.a $(testobjs)
	$(RANLIB) libtest.a

$(progs): libgw.a libgwlib.a
	$(CC) $(CFLAGS) $(LDFLAGS) -o $@ $@.o libgw.a libgwlib.a $(LIBS)

$(testprogs): libtest.a libgw.a libgwlib.a
	$(CC) $(CFLAGS) $(LDFLAGS) -o $@ $@.o libtest.a libgw.a libgwlib.a $(LIBS)
