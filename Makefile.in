#
# Makefile.in for WapIT WAP and SMS Gateway.
#
# Lars Wirzenius <liw@wapit.com>
#


SHELL = @SHELL@

srcdir = @srcdir@
top_srcdir = @top_srcdir@
VPATH = @srcdir@
prefix = @prefix@
exec_prefix = @exec_prefix@

bindir = @bindir@
sbindir = @sbindir@
libexecdir = @libexecdir@
datadir = @datadir@
sysconfdir = @sysconfdir@
sharedstatedir = @sharedstatedir@
localstatedir = @localstatedir@
libdir = @libdir@
infodir = @infodir@
mandir = @mandir@
docdir = @docdir@
includedir = @includedir@
oldincludedir = /usr/include

DESTDIR =

pkgdatadir = $(datadir)/@PACKAGE@
pkglibdir = $(libdir)/@PACKAGE@
pkgincludedir = $(includedir)/@PACKAGE@

top_builddir = .

ACLOCAL = @ACLOCAL@
AUTOCONF = @AUTOCONF@
AUTOHEADER = @AUTOHEADER@

INSTALL = @INSTALL@
INSTALL_PROGRAM = @INSTALL_PROGRAM@ $(AM_INSTALL_PROGRAM_FLAGS)
INSTALL_DATA = @INSTALL_DATA@
INSTALL_SCRIPT = @INSTALL_SCRIPT@
transform = @program_transform_name@

NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
CC = @CC@
MAKEINFO = @MAKEINFO@
PACKAGE = @PACKAGE@
RANLIB = @RANLIB@
SHELL = @SHELL@
VERSION = @VERSION@
LEX = @LEX@
PERL = @PERL@
YACC = @YACC@

# -v gives verbose output.
YFLAGS = -d -p ws_yy_


mkinstalldirs = $(SHELL) $(top_srcdir)/mkinstalldirs
CONFIG_HEADER = config.h
CONFIG_CLEAN_FILES =

VERSION=$(shell head -1 VERSION)

LIBOBJS=@LIBOBJS@
LIBSRCS=$(LIBOBJS:.o=.c)

LIBS=@LIBS@
CFLAGS=-D_REENTRANT=1 @CFLAGS@ -I.
LDFLAGS=@LDFLAGS@

MKDEPEND=$(CC) $(CFLAGS) -MM

JADE=@JADE@
JADETEX=@JADETEX@
DVIPS=@DVIPS@
FIG2DEV=@FIG2DEV@

HTML_DSL=@HTML_DSL@
TEX_DSL=@TEX_DSL@

# Set this to something if you want all installed binaries to have a suffix.
# Version number if common.
suffix = -$(VERSION)

#
# You probably don't need to touch anything below this, if you're just
# compiling and installing the software.
#

STARTSTOPDAEMONSRC=@STARTSTOPDAEMONSRC@

progsrcs = \
	gw/bearerbox.c \
	gw/smsbox.c \
	gw/wapbox.c \
	wmlscript/wmlsc.c \
	wmlscript/wmlsdasm.c \
	utils/seewbmp.c \
	utils/run_kannel_box.c \
	$(STARTSTOPDAEMONSRC)
progobjs = $(progsrcs:.c=.o)
progs = $(progsrcs:.c=)

gwsrcs = $(shell echo gw/*.c)
gwobjs = $(gwsrcs:.c=.o)

libsrcs = $(shell echo gwlib/*.c) $(LIBSRCS)
libobjs = $(libsrcs:.c=.o) $(LIBOBJS)

wmlscriptsrcs = $(shell echo wmlscript/*.[cy])
wmlscriptobjs = $(wmlscriptsrcs:.c=.o) $(wmlscriptsrcs:.y=.o)

testsrcs = $(shell echo test/*.c)
testobjs = $(testsrcs:.c=.o)
testprogs = $(testsrcs:.c=)

srcs = $(shell echo */*.c)
objs = $(srcs:.c=.o)

libs = libgw.a libwmlscript.a libgwlib.a

srcdirs = gw gwlib test utils wmlscript

docsrcs = $(shell grep -l '<!DOCTYPE ' doc/*/*.xml)
docs = $(docsrcs:.xml=.html) $(docsrcs:.xml=.ps)
DOCSTARGET=@DOCSTARGET@

figsrcs = $(shell echo doc/*/*.fig)
figs = $(figsrcs:.fig=.png)  $(figsrcs:.fig=.ps)


.SUFFIXES: $(SUFFIXES) .xml .html .ps .fig .png .y .c .o

.xml.html:
	sed "s/#FIGTYPE#/.png/;s/#VERSION#/`head -1 VERSION`/" $< > $*.tmp
	jade -V nochunks -t sgml -d $(HTML_DSL) $*.tmp > $@
	rm -f $*.tmp

.xml.ps:
	sed "s/#FIGTYPE#/.ps/;s/#VERSION#/`head -1 VERSION`/" $< > $*.tmp
	jade -o $*.tex -t tex -d $(TEX_DSL) $*.tmp
	cd `dirname $<` && jadetex `basename $*`.tex >/dev/null
	cd `dirname $<` && jadetex `basename $*`.tex >/dev/null
	cd `dirname $<` && jadetex `basename $*`.tex >/dev/null
	cd `dirname $<` && dvips -q -o `basename $*`.ps `basename $*`.dvi
	rm -f $*.dvi $*.tex $*.aux $*.log $*.tmp

.fig.png:
	fig2dev -Lpng $< $@

.fig.ps:
	fig2dev -Lps $< $@

.y.c:
	$(YACC) $(YFLAGS) $< && mv y.tab.c $*.c
	if test -f y.tab.h; then \
	if cmp -s y.tab.h $*.h; then rm -f y.tab.h; else mv y.tab.h $*.h; fi; \
	else :; fi

.c.o:
	$(CC) $(CFLAGS) -o $@ -c $<

all: progs tests $(DOCSTARGET)
progs: $(progs)
tests: $(testprogs)
docs: figs $(docs)
no-docs:
figs: $(figs)

install: all
	$(INSTALL) -d $(bindir)
	for prog in $(progs); do \
		$(INSTALL) $$prog $(bindir)/`basename $$prog`$(suffix); \
	done

install-docs:
	$(INSTALL) -d $(docdir)
	cp -r $(docs) $(docsrcs) $(figs) $(figsrcs) $(docdir)

clean:
	rm -f core $(progs) $(testprogs) $(objs) $(docs) *.a
	rm -f $(figs) $(docs)

distclean: clean
	rm -f Makefile config.h config.cache config.log config.status .depend

nag:
	utils/find-long-lines

depend .depend: wmlscript/wsgram.h config.h
	for dir in $(srcdirs); do \
		$(MKDEPEND) $$dir/*.c | sed "s:^[^ ]:$$dir/&:"; done > .depend
include .depend

libgw.a: $(gwobjs)
	ar rc libgw.a $(gwobjs)
	$(RANLIB) libgw.a

libgwlib.a: $(libobjs)
	ar rc libgwlib.a $(libobjs)
	$(RANLIB) libgwlib.a

libwmlscript.a: $(wmlscriptobjs)
	ar rc libwmlscript.a $(wmlscriptobjs)
	$(RANLIB) libwmlscript.a

wmlscript/wsgram.h: wmlscript/wsgram.c

make-op-table: $(srcdir)/wmlscript/make-op-table.in
	sed 's%@PERLPROG@%@PERL@%g' $(srcdir)/wmlscript/make-op-table.in > make-op-table
	chmod a+x make-op-table

opcodes:
	./make-op-table $(srcdir)/wmlscript/wsasm.h > $(srcdir)/wmlscript/wsopcodes.h

$(progs): $(libs) $(progobjs)
	$(CC) $(CFLAGS) $(LDFLAGS) -o $@ $@.o $(libs) $(LIBS)

$(testprogs): $(testobjs) $(libs)
	$(CC) $(CFLAGS) $(LDFLAGS) -o $@ $@.o $(libs) $(LIBS)
