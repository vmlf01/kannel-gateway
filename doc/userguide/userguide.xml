<?xml version="1.0" encoding="ISO-8859-1"?>

<!--
<!DOCTYPE book PUBLIC "-//Norman Walsh//DTD DocBk XML V3.1//EN"
     "dtd/docbook-xml/docbookx.dtd" [
<!ENTITY figtype "#FIGTYPE#">
<!ENTITY timestamp "#DATE#">
]>
-->

<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook V3.1//EN"
     [
<!ENTITY figtype "#FIGTYPE#">
<!ENTITY timestamp "#DATE#">
<!ENTITY version "#VERSION#">
]>

<book>

<bookinfo>
	<title>Kannel &version; User's Guide</title>
	<subtitle>Open Source WAP and SMS gateway</subtitle>
	<author>
		<firstname>Lars</firstname>
		<surname>Wirzenius</surname>
		<affiliation>
			<jobtitle>Gateway architect</jobtitle>
			<orgname>WapIT Ltd</orgname>
			<address> <email>liw@wapit.com</email>
			<otheraddr>http://www.wapit.com</otheraddr>
			<otheraddr>http://www.kannel.org</otheraddr>
			</address>
		</affiliation>
	</author>
	<abstract>
		<title>Abstract</title> 
		<para>This document describes how
		to install and use Kannel, the Open Source WAP and SMS Gateway
		produced by WapIT Ltd.
		</para>
	</abstract>
</bookinfo>


<chapter>
<title>Introduction</title>

	<highlights>
	<para>This chapter introduces WAP in general terms, and explains the
	role of the gateway in WAP, outlining its duties and features. It
	also explains why the Kannel project was started in the first place,
	and why it is open source.</para>
	</highlights>
	
	<para>With hundreds of millions of mobile phones in use all over the
	world, the market for services targeted at mobile users
	is mindbogglingly immense.  Even simple services find plenty of users,
	as long as they're useful or fun. Being able to get news, send e-mail
	or just be entertained wherever you are is extremely attractive to
	lots of people.</para>

	<para>The hottest technology for implementing mobile services is WAP,
	short for Wireless Application Protocol. It lets the phone act
	as a simple web browser, but optimizes the markup language,
	scripting language, and the transmission protocols for wireless
	use. The optimized protocols are translated to plain old HTTP by
	a <emphasis>WAP gateway</emphasis>.</para>

	<para>Kannel is an open source WAP gateway. It attempts to
	provide this essential part of the WAP infrastructure freely
	to everyone so that the market potential for WAP services,
	both from wireless operators and specialized service providers,
	will be realized as efficiently as possible.</para>

	<para>Kannel also works as an SMS gateway for GSM networks. Almost
	all GSM phones can send and receive SMS messages, so this is
	a way to serve many more clients than just those using a new
	WAP phone.</para>

	<para><ulink url="http://www.opensource.org">Open Source</ulink>
	is a way to formalize the principle of openness by placing the
	source code of a product under a Open Source compliant software
	license. The BSD license was chosen over other Open Source
	licenses by the merit of placing the least amount of limitations
	on what a third party is able to do with the source code. In
	practice this means that Kannel is going to be a fully-featured
	WAP implementation and compatible with a maximum amount of
	bearers with special emphasis on SMSC compatibility.</para>

	<para>The Kannel project was founded by <ulink
	url="http://www.wapit.com">WapIT Ltd.</ulink> in June, 1999. WapIT
	Ltd. was founded on October 6th 1998 in Helsinki, Finland to
	organize the work of the team which had built the most extensive
	set of SMS services so far. WapIT Ltd. acts as a content innovator
	and a packager for wireless services. WapIT is a member of the
	<ulink url="http://www.wapforum.org">WAP Forum</ulink>.</para>
	
	
<sect1>
<title>Overview of WAP</title>

	<para>WAP, short for Wireless Application Protocol, is a
	collection of languages and tools and an infrastructure for
	implementing services for mobile phones. Traditionally such
	services have worked via normal phone calls or short textual
	messages (e.g., SMS messages in GSM networks). Neither are very
	efficient to use, nor very user friendly.  WAP makes it possible
	to implement services similar to the World Wide Web.</para>
	
	<para>Unlike marketers claim, WAP does not bring the existing
	content of the Internet directly to the phone. There are too many
	technical and other problems for this to ever work properly. The
	main problem is that Internet content is mainly in the form of
	HTML pages, and they are written in such a way as to require
	fast connections, fast processors, large memories, big screens,
	audio output, and may require fairly efficient input mechanisms.
	That's OK, since they hopefully work better for traditional
	computers and networks that way. However, portable phones have
	very slow processors, very little memory, abysmal and intermittent
	bandwidth, and extremely awkward input mechanisms. Most existing
	HTML pages simply will not work on them, nor will they ever
	do that.</para>
	
	<para>WAP defines a completely new markup language, the Wireless
	Markup Language (WML), which is simpler and much more strictly
	defined than HTML.  It also defines a scripting language,
	WMLScript, which all browsers are required to support. To make
	things even simpler for the phones, it even defines its own
	bitmap format (Wireless Bitmap, or WBMP).</para>
	
	<para>HTTP is also too inefficient for wireless use. By using
	a semantically equivalent, but binary and compressed format it
	is possible to reduce the protocol overhead to a few bytes per
	request, instead of up to hundreds of bytes. Thus, WAP defines a
	new protocol stack to be used. However, to make things simpler
	also for the people actually implementing the services, WAP
	introduces a gateway between the phones and the servers providing
	content to the phones.</para>

        <figure>
        <title>Logcial position of WAP gateway between phone and content server.</title>
        <graphic fileref="wap-gateway&figtype;"></graphic>
        </figure>

	<para>The WAP gateway talks to the phone using the WAP protocol
	stack, and translates the requests it receives to normal
	HTTP. Thus, the content providers can use any HTTP servers, and
	can utilize existing know-how about HTTP service implementation
	and administration.</para>
	
	<para>In addition to protocol translations, the gateway
	also compresses the WML pages into a more compact form, to
	save bandwidth on the air and to further reduce the phone's
	processing requirements. It also compiles WMLScript programs
	into a bytecode format.</para>
	
	<para>Kannel is not just a WAP gateway. It also works as an
	SMS gateway.  Although WAP is the hot and technically superior
	technology, SMS phones exist in huge numbers and SMS services are
	thus quite useful.  Therefore, Kannel functions simultaneously
	as both a WAP and an SMS gateway.</para>

</sect1>
	
	
<sect1>
<title>Features</title>

	<para>This section needs to be written.</para>

</sect1>

<sect1>
<title>Requirements</title>

	<para>Kannel is being developed on Linux systems (Red Hat 6.1 and
	Debian potato), and should be fairly easy to port to other Unix-like
	systems. However, we don't yet support other platforms, due to lack
	of time. Kannel requires the following software environment:
	
	<itemizedlist>

	<listitem><para>C compiler and development libraries and related
	tools.</para></listitem>

	<listitem><para>The Gnome XML library (known as
	gnome-xml and libxml), version 1.8.1 or newer. See <ulink
	url="http://xmlsoft.org/xml.html">http://xmlsoft.org/xml.html</ulink>.
	</para></listitem>

	<listitem><para>GNU Make.</para></listitem>

	<listitem><para>Posix threads (pthread.h).</para></listitem>

	<listitem><para>GNU Bison 1.28 if you modify the WMLScript
	compiler.</para></listitem>

	<listitem><para>DocBook markup language tools (jade, jadetex,
	DocBook stylesheets, etc; see README.docbook), if you want
	to format the documentation (pre-formatted versions are
	available).</para></listitem>

	</itemizedlist>
	</para>
	
	<para>Hardware requirements are fluffier. We haven't benchmarked Kannel
	yet, so there are no hard numbers, but a reasonably fast PC workstation
	(400 MHz Pentium II, 128 MB RAM) should serve several concurrent
	users without problems. The goal is to support hundreds of concurrent
	users on that kind of hardware.</para>

</sect1>

</chapter>

<chapter>
<title>Installing the gateway</title>

	<para>This chapter explains how the gateway can be installed,
	either from a source code package or by using a pre-compiled
	binary version. The goal of this chapter is to get the gateway
	compiled and all the files in the correct places; the next
	chapter will explain how the gateway is configured.</para>

<sect1>
<title>Getting the source code</title>

	<para>The source code to
	Kannel is available for download at <ulink
	url="http://www.kannel.org/download.shtml">http://www.kannel.org/download.shtml</ulink>.
	It is available on various formats and you can choose to download
	either the latest release version or the daily snapshot of the
	development source tree for the next release version, depending
	on whether you want to use Kannel for production use or to
	participate in development.</para>
	
	<para>If you're serious about development, you probably want to
	use CVS, the version control system used by the Kannel project.
	This allows you to participate in Kannel development much
	more easily than by downloading the current daily snapshot and
	integrating any changes you've made every day. CVS does that
	for you. (See the Kannel web site for more information on how
	to use CVS.)</para>

</sect1>


<sect1>
<title>Finding the documentation</title>

	<para>The documentation for Kannel consists of three parts:
	
	<orderedlist>
	<listitem><para><citetitle>User's Guide</citetitle>, i.e., the one
		you're reading at the moment.</para></listitem>
	<listitem><para><citetitle>Architecture and 
		Design</citetitle>, in <filename>doc/arch</filename> or
		at <ulink url="http://www.kannel.org/arch.shtml">
		http://www.kannel.org/arch.shtml</ulink></para></listitem>
	<listitem><para>The <filename>README</filename> and various other
		random text files in the source tree.</para></listitem>
	</orderedlist>
	
	The goal is that everything you need to install and use Kannel
	is in <citetitle>User's Guide</citetitle>, but that goal is
	very far still. Similarly, the <citetitle>Architecture and
	Design</citetitle> document should tell you everything you need
	to know to dive into the sources and quickly be able to make
	your own modifications. It's not a replacement for actually
	reading the source code, but it should work as a map to the
	source code.  The <filename>README</filename> is not supposed
	to be very important, nor contain much information. Instead,
	it will just point at the other documentation.
	</para>
	
	<para>You need the following tools to compile Kannel:
	
	<itemizedlist>

	<listitem><para>C compiler and libraries for ANSI C, with normal
	Unix extensions such as BSD sockets.</para></listitem>

	<listitem><para>An implementation of POSIX threads
	(<filename>pthread.h</filename>).</para></listitem>

	<listitem><para>GNU Bison 1.28, if you want to modify the WMLScript
	compiler (a pre-generated parser is included for those who just
	want to compile Kannel).</para></listitem>

	<listitem><para>DocBook processing tools: DocBook stylesheets,
	jade, jadetex, etc; see <filename>README.docbook</filename> for
	more information (pre-formatted versions of the documentation
	are available, and you can compile Kannel itself even without
	the documentation tools).</para></listitem>
	
	<listitem><para>GNU autoconf, if you want to modify the
	configuration script.</para></listitem>

	</itemizedlist>
	
	</para>

</sect1>

<sect1>
<title>Compiling the gateway</title>

	<para>If you are using Kannel on a supported platform, or one
	that is similar enough to one, compiling Kannel is trivial.
	After you have unpacked the source package of your choosing,
	or after you have checked out the source code from CVS, enter
	the following commands:
	
<screen><userinput>./configure</userinput>
<userinput>make</userinput></screen>
	
	The <filename>configure</filename> script investigates your
	computer for various things Kannel compilation needs, and
	writes out the <filename>Makefile</filename> used to compile
	Kannel. <command>make</command> then runs the commands to
	actually compile Kannel.</para>
	
	<para>If either command writes out an error message and stops
	before it finishes its job, you have a problem, and you either
	need the expertese to fix it yourself, or you need to report the
	problem to the Kannel project. See <xref linkend="bug-reporting">
	for details.</para>
	
	<para>For detailed instruction to using the configuration
	script, see file <filename>INSTALL</filename>.</para>

</sect1>

<sect1>
<title>Installing the gateway</title>

	<para>After you have compiled Kannel, you need to install
	certain programs in a suitable place. This is most easily
	done by using <command>make</command> again:
	
<screen><userinput>make bindir=<replaceable>/path/to/directory</replaceable> install</userinput></screen>

	Replace <replaceable>/path/to/directory</replaceable> with the
	pathname of the actual directory where the programs should be
	installed. The programs that are installed are (as filenames
	from the root of the source directory):
	
	<simplelist>
	<member><filename>gw/bearerbox</filename></member>
	<member><filename>gw/smsbox</filename></member>
	<member><filename>gw/wapbox</filename></member>
	<member><filename>test/test_wml</filename></member>
	</simplelist>
	
	The filenames will get the version number of the gateway added
	during installation. This makes it easier to keep several
	versions installed, and lets you easily go back to an older
	version if the new version proves problematic.</para>
	
	<para>Kannel consists of three programs, called boxes: the
	bearer box is the interface towards the phones. It accepts
	WAP and SMS messages from the phones and sends them to the
	other boxes. The SMS box handles SMS gateway functionality,
	and the WAP box handles WAP gateway functionality. There can
	be several SMS boxes and several WAP boxes running, and they
	don't have to run all on the same host. This makes it possible
	to handle much larger loads than one host can handle.</para>

</sect1>

<sect1>
<title>Using pre-compiled binary packages</title>

	<para>Pre-compiled binary packages are not yet available,
	sorry.</para>

</sect1>

</chapter>

<chapter>
<title>Using the gateway</title>

	<para>This chapter explains how the gateway configured and used.
	It covers configuration file, keeping an eye on the gateway
	while it is running, and using the HTTP interface to control
	the gateway or using it for sending SMS messages.</para>

	<para>There is only one configuration file for all parts of
	Kannel, although when Kannel is distributed to several hosts
	some lines from the configuration file can be removed in some
	hosts.</para>

<sect1>
<title>Configuring the gateway</title>

	<para>The configuration file practically consists of three parts:
	bearerbox configurations, smsbox configurations and
	wapbox configurations. Bearerbox part has one 'core' group
	and any used SMS center groups, while wapbox part has only
	one wapbox group. In smsbox part there is one smsbox group and
	then number of sms-service and sendsms-user groups.</para>

	<para>Details of each part is in appropritae section of this
        documentation. The 'core' group used by the bearerbox is
        explained in this chapter, while 'wapbox' part is in next
        chapter and 'smsbox', 'sms center', 'sms-service' and
        'sendsms-user' groups are in SMS Kannel chapter.</para>


<sect2>
<title>Configuration file syntax</title>

	<para>A configuration file consists of groups of configuration variables. Groups are
	separated by empty lines, and each variable is defined on its
	own line. Each group in Kannel configuration is distinguished
	with a group variable. Comments are lines that begin with a number sign
	(<literal>#</literal>) and are ignored (they don't, for example,
	separate groups of variables).</para>
	
	<para>A variable definition line has the name of the variable,
	and equals sign (<literal>=</literal>) and the value of the
	variable. The name of the variable can contain any characters
	except whitespace and equals. The value of the variable is a
	string, with or without quotation marks (<literal>"</literal>)
	around it. Quotation marks are needed if the variable needs to
	begin or end with whitespace or contain special characters.
	Inside quotation marks normal C escape character syntax works.</para>
	
	<para>Perhaps an example will make things easier to comprehend:

<programlisting>
1    # A do-nothing service.
2    group = sms-service
3    keyword = nop
4    text = "You asked nothing and I did it!"
5
6    # Default service.
4    group = sms-service
8    keyword = default
9    text = "No services defined"
</programlisting>

	The above snippet defines the keyword <literal>nop</literal>
	for an SMS service, and a default action for situation when
	the keyword in the SMS message does not match any defined
	service.</para>
	
	<para>Lines 1 and 6 are comment lines. Line 5 separates the
	two groups. The remaining lines define variables. The
	group type is defined by the group variable value.</para>
	
	<para>The various variables that are understood in each type
	of configuration group are explained below.</para>

</sect2>

<sect2>
<title>Core Configuration</title>

  <para>Configuration for Kannel <emphasis>MUST</emphasis> always
  include a group for general bearerbox configuration. This group is
  named as 'core' in configuration file, and should be the first group
  in the configuration file.</para>

  <para>As its simplest form, 'core' group looks like this:

<programlisting>
group = core
admin-port = 13000
admin-password = f00bar
</programlisting>

   Naturally this is not sufficient for any real use, as you want to
   use Kannel as SMS gateway, WAP gateway or as both. Thus, one or
   more of the optional configuration variables are used.</para>

   <para>The full list of configuration variables in 'core' group is
   this:

<programlisting>
 group = core
 #       This is always required
 # 
 admin-port = &lt;port-number&gt;
 #       The port number in which the bearerbox listens to HTTP
 #       adminstration commands. It is NOT the same as the HTTP
 #       port of the local www server, just invent any port, but
 #       must be over 1023 unless you are running Kannel as a
 #       root process (not recommended)
 #
 admin-password = &lt;password&gt;
 #       Password for HTTP admin commands except for status
 #
 smsbox-port = &lt;port-number&gt;
 #       This is the port number which the smsboxes, if any, connect.
 #       As with admin-port, this can be anything you want
 # 
 wapbox-port = &lt;port-number&gt;
 #       Like smsbox-port, but for wapbox-connections. If not set,
 #       Kannel cannot handle WAP traffic
 # 
 wdp-interface-name = &lt;IP&gt;
 #       If this is set, Kannel listens to WAP UDP packets incoming to
 #       ports 9200-9208, bound to given IP. If no spesific IP is
 #       needed, use just an asterisk ("*"). If UDP messages are
 #       listened to, wapbox-port variable MUST be set.

 log-file = &lt;file-name&gt;
 #       A file in which to write a log. This in addition to stdout
 #       and any log file defined in command line
 #
 log-level = &lt;number 0..5&gt;
 #       Minimum level of logfile events logged. 0 is for debug, 1
 #       info etc.
 #
 access-log = &lt;file-name&gt;
 #       A file in which information about received/sent SMS messages 
 #       is stored.
 #
 box-deny-ip = &lt;IP-list&gt;
 box-allow-ip = &lt;IP-list&gt;
 #       These lists can be used to prevent connection from given IP 
 #       addresses. Each list can have several addresses, each
 #       separated with semicolon (';'). An asterisk ('*') can be used
 #       as a wildcard in a place of any ONE number, so *.*.*.*
 #       matches any IP
 #
 admin-deny-ip = &lt;IP-list&gt;
 admin-deny-ip = &lt;IP-list&gt;
 #       As above, but for adminstration HTTP requests
 #
 unified-prefix = &lt;prefix-list&gt;
 #       String to unify received phone numbers, for SMSC routing and
 #       to ensure that SMS centers can handle them properly. 
 #       This is applied to 'sender' number when receiving SMS
 #       messages from SMS Center and for 'receiver' number when
 #       receiving messages from SMSbox (either sendsms message or
 #        reply to original message). Format is so that first is the
 #       unified prefix, then all prefixes which are replaced by the
 #       unified prefix, separated with comma (','). For example,
 #       for Finland an unified-prefix "+358,00358,0;+,00" should do the trick. 
 #       If there are several unified prefixes, separate their rules with
 #       semicolon (';'), like "+35850,050;+35840,040"
 #
 white-list = &lt;url&gt;
 #       Load a list of accepted senders of SMS messages. If a sender
 #       of an SMS message is not in this list, any message received
 #       from SMS Center is discarded. See notes of phone number
 #       format from numhash.h header file. NOTE: the system has only
 #       a precision of last 9 or 18 digits of phone numbers, so
 #       beware
 #
 black-list = &lt;url&gt;
 #       As white-list, but SMS messages from these numbers are
 #       automatically discarded
 #
 http-proxy-host = &lt;hostname&gt;
 http-proxy-port = &lt;portnumber&gt;
 http-proxy-exceptions = "www.foo.bar www.plimpeli.plom.com"
 #       HTTP Proxy settings.
 #
</programlisting>

</sect2>

</sect1>

<sect1>
<title>Running Kannel</title>

	<para>To start the gateway, you need to start each box you need.
	You always need the bearer box, and depending on whether you want
	WAP and SMS gateways you need to start the WAP and SMS boxes. If
	you want, you can run several of them, but we'll explain the
	simple case of only running one each.</para>


<sect2>
<title>Starting the Gateway</title>

  <para>After you have compiled Kannel and edited configuration file
  for your taste, you can either run Kannel from command line or use
  supplied <literal>start-stop-daemon</literal> and
  <literal>run_kannel_box</literal> programs to use it as daemon
  service (more documentation about that later).</para>

  <para>If you cannot or do not know how to set up daemon systems or
  just want to test out Kannel, you probably want to start it from
  command line. This means that you probably want to have one terminal
  window for each box you want to start (xterm or screen will do
  fine). To start the bearerbox, give the following command:

<screen><userinput>./bearerbox -v 1 [conffile]</userinput></screen>

  The <option>-v 1</option> sets the logging level to
  <literal>INFO</literal>. This way, you won't see a large amount of
  debugging output (the default is <literal>DEBUG</literal>). Full
  explanation of Kannel command line arguments is below.</para>

  <para><emphasis>[conffile]</emphasis> is the name of the
  configuration file you are using with Kannel. The basic distribution
  packet comes with two sample configuration files,
  <literal>smskannel.conf</literal> and
  <literal>wapkannel.conf</literal> (in <literal>gw</literal>
  subdirectory), of which the first one is for
  testing out SMS Kannel and the second one for setting up a WAP
  Kannel. Feel free to edit those configuration files to set up your
  own specialized system.</para>

  <para>After the bearer box, you can start the WAP box:
	
<screen><userinput>./wapbox -v 1 [conffile]</userinput></screen>

  or the SMS box:

<screen><userinput>./smsbox -v 1 [conffile]</userinput></screen>

  or both, of course. The order does not matter, except that you need
  to start the bearer box before the other boxes. Without the bearer
  box, the other boxes won't even start.</para>

  <para>Please note that if you using SMS Kannel, you
  <emphasis>MUST</emphasis> start up any <literal>fakesmsc</literal>
  systems before starting the bearerbox, if there is any
  <literal>fake</literal> SMSC groups in configuration file, like
  there is one in supplied <literal>smskannel.conf</literal>.

</sect2>

<sect2>
<title>Command Line Options</title>

 <para>Bearerbox, smsbox and wapbox each accept certain command line options
   and arguments when they are launched. These arguments are:</para>

 <table frame=none>
  <title>Kannel Command Line Options</title>
  <tgroup cols=2>
  <tbody>
   <row><entry><literal>-v &lt;level&gt;</literal></entry>
        <entry morerows=1 valign=top>
             Set verbosity level for stdout (screen) logging. Default is 0,
             which means 'debug'. 1 is 'info, 2 'warning', 3
             'error' and 4 'panic'
        </entry></row>
   <row><entry><literal>--verbosity &lt;level&gt;</literal></entry></row>

   <row><entry><literal>-D &lt;places&gt;</literal></entry>
        <entry morerows=1 valign=top>
             Set debug-places for 'debug' level output. 
        </entry></row>
   <row><entry><literal>--debug &lt;places&gt;</literal></entry></row>

   <row><entry><literal>-F &lt;file-name&gt;</literal></entry>
        <entry morerows=1 valign=top>
              Log to file named file-name, too. Does not overrun nor
              affect any logfile defined in configuration file.
        </entry></row>
   <row><entry><literal>--logfile &lt;file-name&gt;</literal></entry></row>

   <row><entry><literal>-V &lt;level&gt;</literal></entry>
        <entry morerows=1 valign=top>
            Set verbosity level for that extra logfile (default 0,
            which means 'debug'). Does not affect verbosity level of
            the logfile defined in configuration file, not verbosity
            level of the <literal>stdout</literal> output.
        </entry></row>
   <row><entry><literal>--fileverbosity &lt;level&gt;</literal></entry></row>

   <row><entry><literal>-S</literal></entry>
        <entry morerows=1 valign=top>
             Start the system initially at SUSPENDED state (see below,
              bearerbox only)
        </entry></row>
   <row><entry><literal>--suspended</literal></entry></row>

   <row><entry><literal>-I</literal></entry>
        <entry morerows=1 valign=top>
             Start the system initially at ISOLATED state (see below,
              bearerbox only)
        </entry></row>
   <row><entry><literal>--isolated</literal></entry></row>

   <row><entry><literal>-H</literal></entry>
        <entry morerows=1 valign=top>
             Only try to open HTTP sendsms interface; if it
             fails, only warn about that, do not exit. (smsbox only)
        </entry></row>
   <row><entry><literal>--tryhttp</literal></entry></row>

 </tbody>
 </tgroup>
 </table>

</sect2>

<sect2>
<title>Kannel Statuses</title>

    <para>In Kannel, there are four states for the program (which
    currently directly only apply to bearerbox):</para>
 
    <orderedlist numeration=loweralpha>
     <listitem><para>
       Running. The gateway accepts, proceeds and relies 
       messages normally. This is the defaul state for the bearerbox.
     </para></listitem>
     <listitem><para>
 Suspended. The gateway does not accept any new messages from SMS
   centers nor from UDP ports. It neither does accept new sms and wapbox
   connections and does not send any messages already in the system
   onward.

     </para></listitem>
     <listitem><para>
 Isolated. In this state, the gateway does not accept any messages
   from external message providers, which means SMS Centers and UDP
   ports. It still processes any messages in the system and can
   accept new messages from sendsms interface in smsbox.

     </para></listitem>
     <listitem><para>

   Shutdown. When the gateway is brought down, it does not accept any
   new messages from SMS centers and UDP ports, but processes all
   systems already in the system. As soon as any queues are emptied,
   the system exits

   </para></listitem>
    </orderedlist>
 
  <para>
The state can be changed via HTTP adminstration interface (see below),
and shutdown can also be initiated via TERM or INT signal from
terminal. In addition, the bearerbox can be started already in
suspended or isolated state with -S or -I command line option, see
above.
</para>

</sect2>

<sect2>
<title>HTTP Adminstration</title>

<para>Kannel can be controlled via an HTTP adminstration interface. All
commands are done as normal HTTP queries, so they can be easily done
from command line like this:

<screen><userinput>% lynx -dump "http://localhost:12345/cgi-bin/shutdown?password=bar"</userinput></screen>

...in which the '12345' is the configured admin-port in Kannel
configuration file (see above). For most commands, admin-password is required as a
cgi-bin argument as shown above. In addition, HTTP adminstration can
be denied from certain IP addresses, as explained in configuration
chapter.</para>

 <table frame=none>
  <title>Kannel HTTP Adminstration Commands</title>
  <tgroup cols=2>
  <tbody>
   <row><entry><literal>status</literal></entry>
   <entry valign=top>
        Get the current status of the gateway. Tells the current state
        (see above) and total number of messages relied and queuing in
        the system right now. Also lists the total number of smsbox
        and wapbox connections.
   </entry></row>

   <row><entry><literal>suspend</literal></entry>
   <entry valign=top>
        Set Kannel state as 'suspended' (see above). Password
        required.
   </entry></row>

   <row><entry><literal>isolate</literal></entry>
   <entry valign=top>
        Set Kannel state as 'isolated' (see above). Password required.
   </entry></row>

   <row><entry><literal>resume</literal></entry>
   <entry valign=top>
        Set Kannel state as 'running' if it is suspended or isolated.
        Password required.
   </entry></row>

   <row><entry><literal>shutdown</literal></entry>
   <entry valign=top>
        Bring down the gateway, by setting state to 'shutdown'. After
        a shutdown is initiated, there is no other chance to resume
        normal operation. However, 'status' command still works.
        Password required. If shutdown is sent for a second time, the
        gateway is forced down, even if it has still messages in
        queue.
   </entry></row>
  </tbody>
  </tgroup>
 </table>

</sect2>
  


</sect1>


</chapter>


<chapter id="wap-gateway">
<title>Setting up a WAP Gateway</title>

    <para>This chapter tells you how to set Kannel up as a WAP
    gateway.</para>

<sect1>
<title>WAP Gateway Configuration</title>

  <para>To set up WAP Kannel, you have to edit 'core' group in the
  configuration file, and define 'wapbox' group.</para>

  <para>For 'core' group, you must set following variables:  
    <literal>wapbox-port</literal> and
    <literal>wdp-interface-name</literal>. See previous chapter about
    details of these variables.</para>

  <para>With standard distribution, a sample configuration file
  <literal>wapkannel.conf</literal> is supplied. You may want to take
  a look at that when setting up a WAP Kannel.</para>

<sect2>
<title>Wapbox Configuration</title>

  <para>If you have set <literal>wapbox-port</literal> variable in
  'core' configuration group, you <emphasis>MUST</emphasis> supply
  'wapbox' group.</para>

  <para>The simpliest working 'wapbox' group looks like this:
<programlisting>
group = wapbox
bearerbox-host = localhost
</programlisting>

   There is, however, multiple optional variables for the 'wapbox'
   group.</para>

<programlisting>
 group = wapbox
 #       Mandatory identifier
 #
 bearerbox-host = &lt;host&gt;
 #       The machine in which the bearerbox is. THIS IS TEMPORARY
 #       VARIABLE, but mandatory right now
 #
 log-file = &lt;file-name&gt;
 log-level = &lt;number 0..5&gt;
 #       As with bearerbox (core) logfile
 #
 timer-freq = &lt;value-in-seconds&gt;
 #       the frequency how often timers are checked out. Default is 1 
 #
 map-url = "http://from.here/ http://some.where/"
 #       adds a single mapping for the left side URL to the given destination.
 #       If you append an asterisk `*' to the left side URL, it is prefix
 #       matched against the incoming URL. Whenever that prefix matches,
 #       the URL will be replaced completely by the right side. If you
 #       additionally append an asterisk to the right side URL, the part
 #       of the incoming URL coming after the prefix, will be appended
 #       to the right side URL. Thus, for a line:
 #               map-url = "http://source/* http://destination/*"
 #       and an incoming URL of "http://source/some/path", the result
 #       will be "http://destination/some/path"
 #
 map-url-max = &lt;number&gt;
 #       if you need more than one mapping, set this to the highest number
 #       mapping you need. The default gives you 10 mappings, numbered
 #       from 0 to 9. default: 9
 #
 map-url-0 = "http://from.here/ http://some.where/"
 #       adds a mapping for the left side URL to the given destination URL.
 #       Repeat these lines, with 0 replaced by a number up to map-url-max,
 #       if you need several mappings.
 #
 device-home = "http://some.where/"
 #       adds a mapping for the URL DEVICE:home (as sent by Phone.com browsers)
 #       to the given destination URL. There is no default mapping.
 #       NOTE: the mapping is added with both asterisks, as described above
 #       for the "map-url" setting. Thus, the above example line is
 #       equivalent to writing
 #               map-url = "DEVICE:home* http://some.where/*"
</programlisting>
</sect2>
  
</sect1>

<sect1>
<title>Running WAP Gateway</title>

 <para>WAP Gateway is ran as explained in previous chapter.</para>

</sect1>

</chapter>



<chapter id="sms-gateway">
<title>Setting up a SMS Gateway</title>

    <para>This chapter is a more detailed guide to set Kannel up as a
    SMS gateway. There are three parts in the chapter:

	<orderedlist>
	<listitem><para><citetitle>SMS Center connections</citetitle>,
	the media to transfer SMS messages to actual
	phones.</para></listitem>

        <listitem><para><citetitle>SMS-services</citetitle>, services for mobile orientated
        messages.</para></listitem>

        <listitem><para><citetitle>SMS push</citetitle>,
        configuring and using Kannel SMS push (sendsms) interface</para></listitem>
        </orderedlist>

    </para>

<sect1>
<title>SMS Center Connections</title>

    <para>To use Kannel for real SMS use, you need a real SMS center
    connection. There are generally two types of SMS centers supported
    by Kannel:

     <orderedlist>
       <listitem><para>Operator SMS centers</para></listitem>
       <listitem><para>GSM modems</para></listitem>
     </orderedlist>

     the fake smsc program coming with Kannel is just that, a fake
     system. It cannot be used to send messages to real phones. You
     really need an account at operator's SMS center or GSM modems
     hooked up.</para>

<sect2>
<title>Configuring the SMS Center</title>

    <para>To set up the SMS center at Kannel, you have to add a smsc
    group into configuration file (see above for configuration
    files). This group must include all the data needed to connect
    that SMS center. You may also want to define an ID
    (identification) name for the SMSC, for logging and routing
    purposes.</para>

    <para>SMSC ID is an abstract name for the connection. It can be
    anything you like, but you should avoid any special
    characters. You do not need to use ID, but rely on SMS center IP
    address and other information. However, if you use the ID, you do
    not need to re-define sms-services nor routing systems if the IP
    of the SMS Center is changed, for example.</para>


</sect2>
<sect2>
<title>Using multiple SMS centers</title>

    <para>If you have several SMS center connections (multiple
    operators or number of GSM modems) you need to configure one smsc
    group per SMS Center (or GSM modem). When doing this, you might
    want to use routing systems to rout messages to specific centers -
    for example, you have 2 operator SMS centers, and the other is
    much faster and cheaper to use.</para>

    <para>To set up routing systems, first give an unique ID for each
    SMS center - or if you want to treat multiple ones completely
    identical, give them identical ID. Then use 'preferred-smsc-id'
    and 'denied-smsc-id' to set up routing to your taste. See also SMS
    PUSH settings, below.</para>
</sect2>
</sect1>

<sect1>
<title>SMS Service Definations</title>

    <para>Now that you have a SMS center connection to send and
    receive SMS messages you need to define services for incoming
    messages. This is done via sms-service configuration groups.
    </para>

    <para>The full list of SMS service variables is defined in
    newconf.txt, but as a short introduction, the simplest service
    group is like this:
<programlisting>
group = sms-service
keyword = www
url = "http://%S"
</programlisting>
     
     This service grabs any SMS with 'www' as the first word, and then
     does HTTP request to URL which is taken from the rest of the
     message. Any result is sent back to phone (or requester), but is
     truncated to 160 characters, naturally.</para>


<sect2>
<title>Setting Up More Complex Services</title>

    <para>The basic service system is very limited - it can only
    answer to original requester and it cannot send UDH data, for
    example. To create more sophicated systems, SMS Push is
    used.</para>

    <para>The idea is to get the initial request, but then send no
    reply. Instead, the reply (if any) is sent via HTTP
    sendsms-interface, as a SMS Push (see below). This way the service
    application has full control of return content, and can do all
    needed formatting beforehand.</para>

    <para>Note that when no reply is wanted, remember to set variable
    'max-messages' to zero (0) so that no reply is sent, unless an
    error occurs.</para>

</sect2>
<sect2>
<title>Setting Up Operator Specific Services</title>

   <para>Those running Kannel with several SMS centers might need to
   define services according to relying SMS center. To achieve this,
   first you need to give an ID name for SMS center connections (see
   above). Then, use 'accepted-smsc' variable to define which messages
   can use that service.</para>

</sect2>

</sect1>

<sect1>
<title>SMS Push</title>

   <para>To be able to use SMS Push with Kannel, you need to define 
    <literal>sendsms-port</literal> for smsbox and one or more 
    <literal>sendsms-user</literal> accounts. All these are put into
    Kannel configuration file and read during startup of the system.
   </para>


<sect2>
<title>Using the HTTP interface to send SMS messages</title>

	<para>If you have configured Kannel to allow the sendsms
	service, you can send SMS messages via HTTP, e.g., using a
	WWW browser. The URL looks something like this:
	
<programlisting>
http://smsbox.host.name:13013/cgi-bin/sendsms?username=foo&amp;password=bar&amp;to=0123456&amp;text=Hello+world
</programlisting>

         Thus, technically,
	you make a HTTP GET request. This means that all the information
	is stuffed into the URL. If you want to use this often via a
	browser, you probably want to make an HTML form for this.</para>

 <table frame=none>
  <title>SMS Push (send-sms) CGI Variables</title>
  <tgroup cols=2>
  <tbody>
   <row><entry><literal>username</literal></entry>
   <entry valign=top>
        Username or account name. Must be 'username' of the one
        <literal>sendsms-user</literal> group in Kannel configuration,
        or results in 'Authorization failed' reply.
   </entry></row>

   <row><entry><literal>password</literal></entry>
   <entry valign=top>
       Password associated to given 'username'. Must match
 corresponding field in <literal>sendsms-user</literal> group in
 Kannel configuration, or 'Authorization failed' is returned.
   </entry></row>

   <row><entry><literal>from</literal></entry>
   <entry valign=top>
        Phone number of the sender. This field is usually overridden
        by the SMS Center, or it can be overridden by
        <literal>faked-sender</literal> variable in
        <literal>sendsms-user</literal> group. If this variable is not
        set, smsbox <literal>global-sender</literal> is used.
   </entry></row>

   <row><entry><literal>to</literal></entry>
   <entry valign=top>
        Phone number of the receiver.
   </entry></row>

   <row><entry><literal>text</literal></entry>
   <entry valign=top>
        Contents of the message, URL encoded as necessary. The content
        can be more than 160 characters, but then
        <literal>sendsms-user</literal> group must have
        <literal>max-messages</literal> set more than 1.
   </entry></row>

   <row><entry><literal>udh</literal></entry>
   <entry valign=top>
         Optional User Data Header (UDH) part of the message. Must be
         URL encoded.
   </entry></row>

   <row><entry><literal>smsc</literal></entry>
   <entry valign=top>
        Optional guideline of which SMS Center is used to send the
        message (see above). This cariable can be overridden with
        <literal>forced-smsc</literal> configuration
        variable. Likewise, <literal>default-smsc</literal> variable
        can be used to set the SMSC if it is not set otherwise.
   </entry></row>

  </tbody>
  </tgroup>
 </table>

	
</sect2>


</sect1>



</chapter>

<chapter id="bug-reporting">
<title>Getting help and reporting bugs</title>

	<para>This chapter explains where to find help with problems
	related to the gateway, and the preferred procedure for reporting
	bugs and sending corrections to them.</para>
	
	<para>The Kannel development mailing list is at
	devel@kannel.org.  To subscribe, send mail to <ulink
	url="mailto:devel-subscribe@kannel.org">devel-subscribe@kannel.org</ulink>.
	This is currently the best location for asking help and reporting
	bugs. Please include configuration file and version number.</para>
	
</chapter>

<appendix>
<title>Using the fake WAP sender</title>

	<para>This appendix explains how to use the fake WAP sender
	to test the gateway.</para>

</appendix>


<appendix>
<title>Using the fake SMS center</title>

	<para>This appendix explains how to use the fake SMS center
	to test the gateway.</para>

</appendix>


<appendix>
<title>Setting up a dial-up line</title>

	<para>This appendix explains how to set up a dial-up line for
	use with the gateway. It will probably be very short, and refer
	to existing documentation.</para>

</appendix>


</book>
